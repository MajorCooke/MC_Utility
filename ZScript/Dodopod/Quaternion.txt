/*
	Code by Dodopod, from 6 Degrees of Freedom.
	https://forum.zdoom.org/viewtopic.php?f=105&t=64041
*/

Class MC_QuatTurner
{
	MC6DOF_Quaternion	
		orientation,	// Input yaw, pitch and roll here with FromEulerAngle.
		input,			// Input the changes to be made here, and use Multiply.
		result;			// Get the result from here.
	
	static MC_QuatTurner Create()
	{
		let q = new('MC_QuatTurner');
		return q;
	}
	
	Vector3 GetTurnActor(Actor mo, Vector3 Angles)
	{
		if (!mo)	return (0,0,0);
		Vector3 NewAng = (0,0,0);
		[NewAng.X, NewAng.Y, NewAng.Z] = GetTurnActorDouble(mo, Angles.X, Angles.Y, Angles.Z);
		return NewAng;
	}
	
	double, double, double GetTurnActorDouble(Actor mo, double angle, double pitch, double roll)
	{
		if (!mo)	return 0, 0, 0;
		orientation.FromEulerAngle(mo.angle, mo.pitch, mo.roll);
		input.FromEulerAngle(angle, pitch, roll);
		MC6DOF_Quaternion.Multiply(result, orientation, input);
		[angle, pitch, roll] = result.ToEulerAngle();
		return angle, pitch, roll;
	}
	
	Vector3 GetTurn(Vector3 Angles, Vector3 NewAng)
	{
		[Angles.X, Angles.Y, Angles.Z] = GetTurnDouble(
				(Angles.X, NewAng.X), 
				(Angles.Y, NewAng.Y), 
				(Angles.Z, NewAng.Z));
		return Angles;
	}
	
	double, double, double GetTurnDouble(Vector2 angle, Vector2 pitch, Vector2 roll)
	{
		orientation.FromEulerAngle(angle.x, pitch.x, roll.x);
		input.FromEulerAngle(angle.y, pitch.y, roll.y);
		MC6DOF_Quaternion.Multiply(result, orientation, input);
		[angle.x, pitch.x, roll.x] = result.ToEulerAngle();
		return angle.x, pitch.x, roll.x;
	}
	
	Vector3 GetTurn2(Vector3 Angles, Vector3 NewAng)
	{
		[Angles.X, Angles.Y, Angles.Z] = GetTurnDouble2(Angles, NewAng);
		return Angles;
	}
	
	double, double, double GetTurnDouble2(Vector3 orient, Vector3 inp)
	{
		orientation.FromEulerAngle(orient.x, orient.y, orient.z);
		input.FromEulerAngle(inp.x, inp.y, inp.z);
		MC6DOF_Quaternion.Multiply(result, orientation, input);
		[inp.x, inp.y, inp.z] = result.ToEulerAngle();
		return inp.x, inp.y, inp.z;
	}
}

struct MC6DOF_Quaternion
{
    double w;
    Vector3 v;

    void Copy(in MC6DOF_Quaternion other)
    {
        w = other.w;
        v = other.v;
    }

    void FromEulerAngle(double yaw, double pitch, double roll)
    {
        double cy = Cos(yaw * 0.5);
        double sy = Sin(yaw * 0.5);
        double cp = Cos(pitch * 0.5);
        double sp = Sin(pitch * 0.5);
        double cr = Cos(roll * 0.5);
        double sr = Sin(roll * 0.5);

        w = cy * cp * cr + sy * sp * sr;
        v.x = cy * cp * sr - sy * sp * cr;
        v.y = sy * cp * sr + cy * sp * cr;
        v.z = sy * cp * cr - cy * sp * sr;
    }

    float, float, float ToEulerAngle()
    {
        // Roll
        double sinRCosP = 2 * (w * v.x + v.y * v.z);
        double cosRCosP = 1 - 2 * (v.x * v.x + v.y * v.y);
        double roll = Atan2(sinRCosP, cosRCosP);

        // Pitch
        double sinP = 2 * (w * v.y - v.z * v.x);
        double pitch;
        if (Abs(sinP) >= 1) pitch = 90 * (sinP < 0 ? -1 : 1);
        else pitch = Asin(sinP);

        // Yaw
        double sinYCosP = 2 * (w * v.z + v.x * v.y);
        double cosYCosP = 1 - 2 * (v.y * v.y + v.z * v.z);
        double yaw = Atan2(sinYCosP, cosYCosP);

        return yaw, pitch, roll;
    }

    void Invert()
    {
        v = -v;
    }

    Vector3 Rotate(Vector3 v)
    {
        MC6DOF_Quaternion v4;
        v4.v = v;

        Invert();
        Multiply(v4, v4, self);
        Invert();
        Multiply(v4, self, v4);

        return v4.v;
    }

    static void Add(out MC6DOF_Quaternion res, in MC6DOF_Quaternion lhs, in MC6DOF_Quaternion rhs)
    {
        res.w = lhs.w + rhs.w;
        res.v = lhs.v + rhs.v;
    }

    static void Subtract(out MC6DOF_Quaternion res, in MC6DOF_Quaternion lhs, in MC6DOF_Quaternion rhs)
    {
        res.w = lhs.w - rhs.w;
        res.v = lhs.v - rhs.v;
    }

    static void Scale(out MC6DOF_Quaternion res, in double lhs, in MC6DOF_Quaternion rhs)
    {
        res.w = lhs * rhs.w;
        res.v = lhs * rhs.v;
    }

    static void Multiply(out MC6DOF_Quaternion res, in MC6DOF_Quaternion lhs, in MC6DOF_Quaternion rhs)
    {
        double lw = lhs.w;
        double rw = rhs.w;

        res.w = rw * lw - rhs.v dot lhs.v;
        res.v = rw * lhs.v + lw * rhs.v + lhs.v cross rhs.v;
    }

    static double DotProduct(in MC6DOF_Quaternion lhs, in MC6DOF_Quaternion rhs)
    {
        return lhs.w * rhs.w + lhs.v dot rhs.v;
    }

    static void Slerp(out MC6DOF_Quaternion res, in MC6DOF_Quaternion start, in MC6DOF_Quaternion end, double t)
    {
        MC6DOF_Quaternion s;
        s.Copy(start);
        MC6DOF_Quaternion e;
        e.Copy(end);

        double dp = DotProduct(s, e);

        if (dp < 0)
        {
            Scale(e, -1, e);
            dp *= -1;
        }

        if (dp > 0.9995)
        {
            Subtract(res, e, s);
            Scale(res, t, res);
            Add(res, s, res);
        }
        else
        {
            double Theta0 = ACos(dp);
            double Theta = t * Theta0;
            double sinTheta = Sin(Theta);
            double sinTheta0 = Sin(Theta0);

            Scale(s, Cos(Theta) - dp * sinTheta / sinTheta0, s);
            Scale(e, sinTheta / sinTheta0, e);
            Add(res, s, e);
        }
    }
}