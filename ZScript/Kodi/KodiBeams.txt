//Each of these represents a point where an actor is to be spawned, and contains some data for setting it up.
class MC_ActorPoint: object
{
	bool isFlipped; //relevant to 3D model actors, signifying that model origin and outer edge should be flipped.
	color col;
	vector3 pos;
	vector3 nextpos;
	vector3 offset;
	
	actor act; //pointer to actor. 
	static MC_ActorPoint init(vector3 pushPos)
	{
		
		let p = new("MC_ActorPoint");
		p.pos = pushPos;
		p.col = "AAFFFF";
		return p;
	}
}

Class MC_CubicCurve3D: object
{
	vector3 nodes[4];
	static clearscope MC_CubicCurve3D init(vector3 p0, vector3 p1, vector3 p2, vector3 p3)
	{
		MC_CubicCurve3D c = MC_CubicCurve3D(new("MC_CubicCurve3D"));
		c.nodes[0] = p0;
		c.nodes[1] = p1;
		c.nodes[2] = p2;
		c.nodes[3] = p3;
		return c;
	}
}


struct MC_kBezier 
{
	clearscope static vector2 QuadraticPointOnCurve2D(vector2 p1, vector2 p2, vector2 p3, double t) 
	{
		double x = (1. - t) * (1. - t) * p1.x + 2. * (1. - t) * t * p2.x + t * t * p3.x;
		double y = (1. - t) * (1. - t) * p1.y + 2. * (1. - t) * t * p2.y + t * t * p3.y;
		return (x,y);
	}
	
	clearscope static vector3 QuadraticPointOnCurve3D(vector3 p1, vector3 p2, vector3 p3, double t) 
	{
		double x = (1. - t) * (1. - t) * p1.x + 2. * (1. - t) * t * p2.x + t * t * p3.x;
		double y = (1. - t) * (1. - t) * p1.y + 2. * (1. - t) * t * p2.y + t * t * p3.y;
		double z = (1. - t) * (1. - t) * p1.z + 2. * (1. - t) * t * p2.z + t * t * p3.z;
		return (x,y,z);
	}
 
	//Credits to 3saster for writing this much improved version of the function!
	clearscope static Vector3 CubicPointOnCurve3D(double t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, bool unitspeed=false, int prec=50, double arcLength = -1)
	{
		// based off of this to get unit speed
		// https://gamedev.stackexchange.com/a/27138
		if(unitspeed) //precise but slow
		{
			Vector3 v1 = -3*p0  +9*p1 -9*p2 +3*p3;
			Vector3 v2 =  6*p0 -12*p1 +6*p2;
			Vector3 v3 = -3*p0  +3*p1;
			
			double ts = 0;
			double L = arcLength >= 0 ? arcLength : CubicCurveLength3D(p0, p1, p2, p3) * t;
			for(int p=0; p<prec; p++)
			{
				Vector3 scaler = ts*ts*v1+ts*v2+v3;
				ts += L/prec/scaler.Length();
			}
			return CubicPointOnCurve3D(ts,p0,p1,p2,p3);
		}
		else //much faster
		{
			double u = 1 - t;
			double tt = t*t;
			double uu = u*u;
			double uuu = uu * u;
			double ttt = tt * t;
			Vector3 p = uuu * p0; //first term
			p += 3 * uu * t * p1; //second term
			p += 3 * u * tt * p2; //third term
			p += ttt * p3; //fourth term
			return p;
		}
	}
	//Credits to 3saster!
	clearscope static double CubicCurveLength3D(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, int prec=5000, double tend=1)
	{
		Array<double> ds;
		double precision = 1./(prec - prec%2);
		
		for(double t = 0; t <= tend; t += precision)
		{
			double u = 1 - t;
			double tt = t*t;
			double uu = u*u;
			Vector3 p = (0,0,0);
			p += 3 * uu * 1  * (p1 - p0); //first term
			p += 6 * u  * t  * (p2 - p1); //second term
			p += 3 * 1  * tt * (p3 - p2); //third term
			ds.push( sqrt(p.x*p.x + p.y*p.y + p.z*p.z) );
		}

		// Simpson's Rule
		double arclength = ds[0] + ds[ds.size()-1];
		//4's
		for(int i = 1; i < ds.Size()-1; i += 1)
		{
			arclength += 2*ds[i];
		}
		//2's
		for(int i = 2; i < ds.Size()-1; i += 2)
		{
			arclength += 2*ds[i];
		}

		return arclength*precision/3;
	}

	clearscope static int SetCurveCubic3D(in out array<MC_CubicCurve3D>curves, int index, vector3 p0, vector3 p1, vector3 p2, vector3 p3, bool forceInsert = false, bool ConnectCurveHandles = true)
	{
		int size = curves.size();
		
		if(index > size)
		{
			console.printf("kBezier.SetCubicCurve3D() failure. Index out of array bounds");
			return 0;
		}
		
		if( index == 0 && size == 0)
		{
			MC_CubicCurve3D curve = MC_CubicCurve3D.init(p0,p1,p2,p3);
			curves.insert(index,curve);
		}
		else if (index == size)
		{
			MC_CubicCurve3D curve = MC_CubicCurve3D.init(p0,p1,p2,p3);
			curves.insert(index,curve);
		}
		else if(curves[index] && !forceInsert)
		{
			curves[index].nodes[0] = p0;
			curves[index].nodes[1] = p1;
			curves[index].nodes[2] = p2;
			curves[index].nodes[3] = p3;
		}
		else
		{
			MC_CubicCurve3D curve = MC_CubicCurve3D.init(p0,p1,p2,p3);
			curves.insert(index,curve);
		}
		if(index > 0 && ConnectCurveHandles)
		{
			vector3 diff = curves[index].nodes[0] - curves[index-1].nodes[2];
			curves[index].nodes[1] = curves[index].nodes[0] + diff; 
			//sets the second control handle/node of the current curve to the 
			//inverse of the third handle of the previous curve in the array.
		}
		
		return index+1;
	}
	
	clearscope static void DeleteCurvesAfterIndexCubic3D (in out array<MC_CubicCurve3D> curves, int index)
	{
		int size = curves.size();
		if(index > size)
		{
			console.printf("kBezier.DeleteAfterIndex() failure. Index out of array bounds");
			return;
		}
		else
		{
			curves.Delete (index, size-index);
		}
	}
	
	clearscope static void MakeActorPointsCubic3D(in array<MC_CubicCurve3D> curves, in out array<MC_ActorPoint> actorPoints, int pointsPerCurve = 4, bool ClearOldPoints = false, bool fliphalfway = false, color col = color(255,0,255,255))
	{
		//wont work if size is 0 yet
		int apSize = actorPoints.size(); 
		int curveSize = curves.size();
		int count;
	
		if(clearOldPoints)
		{
			//actorPoints.clear();
		}
		
		for(int i = 0; i < curveSize; i++) 
		{
			for(int j = 0; j < pointsPerCurve; j++) 
			{
				
				vector3 curpos =  CubicPointOnCurve3D(j 	/	double(pointsPerCurve), curves[i].nodes[0], curves[i].nodes[1], curves[i].nodes[2], curves[i].nodes[3]);					
				vector3 nextpos = CubicPointOnCurve3D((j+1)/	double(pointsPerCurve), curves[i].nodes[0], curves[i].nodes[1], curves[i].nodes[2], curves[i].nodes[3]);		
				
				if(!clearOldPoints && apSize !=0)
				{
					MC_ActorPoint oldpt = actorPoints[(i * pointsPerCurve) + j];
					if(oldpt)
					{
						oldpt.pos = curpos;
						oldpt.nextpos = nextpos;
					}
					else
					{
						MC_ActorPoint pt = MC_ActorPoint(MC_ActorPoint.init(curpos));
						pt.col = col;
						pt.nextpos = nextpos;
						actorpoints.insert(i * pointsperCurve + j,pt);
					}
				}
				else
				{
					MC_ActorPoint pt = MC_ActorPoint(MC_ActorPoint.init(curpos));
					pt.col = col;
					pt.nextpos = nextpos;
					actorpoints.insert(i * pointsperCurve + j,pt);
				}
				if(fliphalfway && curveSize > 1 && i > curvesize/2)
				{
					actorpoints[(i * pointsperCurve + j)].isFlipped = true;
					actorpoints[(i * pointsperCurve + j)].nextpos = curpos;
					actorpoints[(i * pointsperCurve + j)].pos = nextpos;
				}
				count++;
			}
		}
		//clear the unused tail end of the array
		actorPoints.Delete(count, apSize-count);	
	}
	
	clearscope static void RandomizeActorPointsCubic(in out array<MC_ActorPoint> actorPoints, double mul =1.0)
	{
		for(int i = 0; i < actorPoints.size()-1; i++)
		{
			vector3 rand = (frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0)); 
			actorpoints[i].offset = rand*mul; 
			actorpoints[i+1].offset = rand*mul;
		}
	}
	
	clearscope static void PropagateActorPointOffsets(in out array<MC_ActorPoint> actorPoints)
	{
		for(int i = 1; i < actorPoints.size()-1; i++)
		{
			actorpoints[i].offset = actorpoints[i+1].offset;
			//vector3 normal = (actorPoints[i].pos - actorPoints[i].nextpos).unit();
			//actorpoints[i].offset = MC_kMath.Vector3Lerp(actorpoints[i].offset, actorpoints[i-1].offset,0.25);
			//actorpoints[i].offset = MC_kMath.Vector3Lerp(actorpoints[i].offset, actorpoints[i+1].offset,0.25);
			//actorPoints[i].offset = actorpoints[i-1].offset cross normal;
		}
	}
	
	static play void MakeOrMoveActors(in array<MC_ActorPoint> actorPoints, in out array<actor> segmentactors, actor source, class<actor> spawnclass = "MC_BasicBeam", double scale = 1.0, bool ReuseSegmentActors = true, int ActorLifeTime = 1, int ActorVisibletime = 1,  bool interpolateOldPoints = false)
	{
		int apSize = actorPoints.size();
		int saSize = segmentactors.size();
		for(int i = 0; i< apSize; i++)
		{
			actor beam;
			vector3 startpoint = actorpoints[i].pos;
			vector3 endpoint = actorpoints[i].nextpos;
			
			if(actorPoints[i].IsFlipped)
			{
				endPoint += actorPoints[i-1].Offset;
				
				if(i < apSize - 1)
				{
					startPoint += actorpoints[i].offset;
				}
			}
			
			else if(i > 0)
			{
				startpoint += actorpoints[i].offset;
				if(i < apSize - 1)
				{
					endpoint += actorpoints[i+1].offset;
				}
			}
			else if (i == 0)
			{
				endpoint += actorpoints[i+1].offset;
			}
			

			if(ReuseSegmentActors && saSize > 0 && i < saSize ) 
			{
				if(segmentactors[i])
				{
					beam = segmentactors[i];
				}
				else //failsafe
				{
					beam = actor.spawn(spawnclass,startpoint); 
					actorPoints[i].act = beam;
					segmentactors.push(beam);
				}
			}
			else
			{
				beam = actor.spawn(spawnclass,startpoint); 
				actorPoints[i].act = beam;
				segmentactors.push(beam);
			}
			
			vector3 spdif; 
			vector3 spoff; 
			
			let p = playerpawn(source); //use camera position offset for when a playerpawn (or psprite) calls the function
			if(p)
			{
				spdif = level.vec3diff((p.pos.xy, p.player.viewz),startpoint);
				spoff = level.vec3offset((p.pos.xy,p.player.viewz),spdif)  ;
				beam.SetOrigin((p.pos.xy, p.player.viewz) + spdif,InterpolateOldPoints);
			}
			else if (source)
			{
				spdif = level.vec3diff(source.pos, startpoint);
				spoff = level.vec3offset(source.pos, spdif);
				beam.SetOrigin(spoff,InterpolateOldPoints);
			}
			
			vector3 dif = level.Vec3Diff(startpoint,endpoint);
			vector2 angs = MC_kMath.AnglesFromVec3(dif);
		//	beam.angle = angs.x;
		//	beam.pitch = angs.y-90;
			beam.A_SetAngle(angs.x,SPF_INTERPOLATE & InterpolateOldPoints);
			beam.A_SetPitch(angs.y-90,SPF_INTERPOLATE & InterpolateOldPoints);
			beam.scale = (scale,dif.length());
			beam.args[0] = ActorLifeTime;
			beam.args[1] = ActorVisibleTime;
			beam.SetShade(actorpoints[i].col);
		}
		segmentActors.Resize(apSize);
	}
}


Class MC_BasicBeam : actor
{
	override void tick()
	{
		if(isFrozen())
		{
			return;
		}
		if(GetAge() < 1)
		{
			A_SetRenderStyle(0,STYLE_NONE);
		}
		else
		{
			A_SetRenderStyle(default.alpha,STYLE_ADDSHADED);
		}
		args[0]--;
		args[1]--;
		super.tick();
		
	}
	
	default
	{
		+noblockmap;
		+nogravity;
		+nointeraction;
		renderstyle "none";
		+INTERPOLATEANGLES;
		StencilColor "AAFFFF";
		alpha 2;
	}
	Override void PostBeginPlay()
	{
	//	self.pitch -= 90.0;
	}
	states
	{
	
		spawn:
			TNT1 A 0 nodelay;
			goto beamloop;
		
		beamloop:
			MODL A 1 bright;
			TNT1 A 0 A_JumpIf(args[0] <= 0,"byebyebeam");
			loop;
			
		byebyebeam:
			tnt1 A 0;
			stop;
	}
}

class MC_Dot : actor
{
	default
	{
		+noblockmap;
		+nogravity;
		+nointeraction;
		//renderstyle "shaded";
		StencilColor "FF0000";
		scale 0.24;
		alpha 0.5;
	}

	states
	{
		spawn:
			TNT1 A 0 nodelay;
			BAL1 A 1 bright;
			stop;
	}
}


Class MC_SimplestBeam : actor
{ 
	default
	{
		+noblockmap;
		+nogravity;
		+nointeraction;
		renderstyle "shaded";
		StencilColor "FF0000";
	}
	states
	{
		spawn:
			TNT1 A 0;
			TNT1 A 1 bright;
			stop;
	}
}
