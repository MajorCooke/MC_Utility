Class MC_Functions play
{
	/*--------------------------------------------------------------------------
	GetFalloff
	
	Gets a falloff scalar, primarily used for effect radius. Can also be 
	thought of as how much of a percentage (when multiplied by 100) a thing has
	travelled from point 1 (dmax) to point 2 (dmin).
	
	-- Arguments --
	*dmin 
		The closest distance to check the calculation.
		
	*dmax
		The farthest distance.
		
	*dist
		The current point of travel.
		
	-- Result --
	Returns a scalar value between [0.0, 1.0].
	--------------------------------------------------------------------------*/

	static double GetFalloff(double dmin, double dmax, double dist)
	{
		dmin = Max(0, dmin);
		dmax = Max(0, dmin, dmax);
		
			 if (dist <= dmin)	return 1.0;
		else if (dist > dmax)	return 0.0;
		else
		{
			double radius = Max(1, dmax - dmin);
			return (1.0 - ((dist - dmin) / radius));
		}
		return 0;
	}

	/*--------------------------------------------------------------------------
	GetDamageFalloff
	
	Does a trace to the victim from the bomb, and calculates the damage falloff.
	Used by Explode for proper thrusting implementation.
	
	-- Arguments --
	*bomb
		Trace starts here. Placed at the feet, or middle if centerz is true.
		
	*victim
		Trace ends at the bounding box of this actor.
		
	*radius
		Spherical radius, used primarily falloff calculation.
		
	*full
		Distance in which there is no falloff.
		
	*_2d
		Ignores z height differences, like OLDRADIUSDMG.
		
	*centerz
		If true, the trace comes from the bomb's middle instead of the base.
		
	--------------------------------------------------------------------------*/
	static double GetDamageFalloff(Actor bomb, Actor victim, double radius, double full, 
		bool _2d, bool centerz = false)
	{
		// No point running this when without something to trace towards.
		if (!bomb || !victim || radius <= 0)		return 0.0;
		
		// Full force in this case.
		if (bomb == victim || full >= radius) 		return 1.0;
		
		// Aim from the base of the bomb to the victim's middle.
		Vector3 bpos = bomb.pos,
				vpos = victim.pos + (0,0,victim.height * 0.5);
		
		// GZDoom's OLDRADIUSDMG basically.
		if (_2d)	vpos.z = bpos.z;
		else if (centerz) bpos.z += bomb.height * 0.5;
		
		Vector3 APR = level.Vec3Diff(bpos, vpos);
		
		// Use a trace to get the edge of the bounding box. We'll use this point
		// to ensure they're more affected than what GZDoom's code uses, which is
		// the center. This also turns it radial instead of using a box.
		
		let trc = new('GDDTracer');
		trc.trg = victim;
		trc.Trace(bpos, bomb.cursector, APR, radius * 2, 0); // *2: Just to make sure it hits.
		
		if (trc.Results.HitType == TRACE_HitActor)
		{
			// Apparently this just indicates what was passed in, not the actual distance
			// from start to hit point. Only adjusted if it hit a plane, weirdly enough...
		//	double dist = trc.Results.Distance;
			double dist = level.Vec3Diff(trc.Results.HitPos, bpos).Length();
			if (dist > radius)		return 0.0;
			else if (dist <= full)	return 1.0;
			else
			{
				double size = radius - full;
				double ret = (1.0 - ((dist - full) / size));
				return ret;
			}
		}
		return 0.0;
	}

	/*--------------------------------------------------------------------------
	Explode
	
	Replicates a more realistic form of thrusting with explosions. No nails
	though. Also doesn't support DontHurtShooter or deprecated stuff.
	
	-- Arguments --
	*bomb
		The actor dealing the damage
	
	*source 
		he actor responsible for bomb. Replaces XF_NOTMISSILE.
	
	*damage
		Damage to deal. Uses ExplosionDamage if < 1 (default).
	
	*radius
		Radius of explosion. Uses ExplosionRadius if < 1 (default).
	
	*full
		Inner radius ring to deal maximum damage.
	
	*thrust
		How much force to apply based on A_RadiusThrust. Default is -1,
		which translates to damage * 30 (since otherwise the thrust would be 
		microscopic).
		
	*trad
		Radius specifically for thrust. Defaults to damage radius.
	
	*tfull
		Full thrust radius. Defaults to full damage radius.
	
	*flags
		A_Explode flags. XF_NOTMISSILE is ignored. Use source instead.
	
	*radflags
		A_RadiusThrust flags. Only some supported.
		RADF_ALWAYSTHRUST - New flag, always applies thrust even if the actor
			were to be excluded.
		RADF_NODAMAGE - No explosion damage dealt, but thrusting will apply
			BLASTED flag.
		RADF_NOIMPACTDAMAGE - Prevents BLASTED flag from being applied.
		RADF_FORCEZERORADIUSDMG
	
	*alert
		Wake up monsters nearby? Use with care. Repeated usage of this causes
		slowdowns with the game, especially on larger maps with more monsters!
	
	*DamageType
		The damage type of the bomb. If none, use bomb's unless
		XF_EXPLICITDAMAGETYPE is in flags.
		
	*filter
		If not null, only this class can receive damage from it.
		
	*eflags
		EXF_PARENT - Actors inheriting from filter are included with it.
		EXF_INVERSE - Filter behaves as a blacklist instead of a whitelist.
	
	Returns # of actors damaged.
	--------------------------------------------------------------------------*/
	static int Explode(Actor bomb, Actor source, 
		int damage = -1, int radius = -1, int full = 0, 
		double thrust = -1, double trad = -1, int tfull = -1,
		int flags = XF_HURTSOURCE, int radflags = 0, 
		bool alert = false, Name DamageType = 'None', 
		Class<Actor> filter = null, int eflags = EXF_PARENT)
	{
		if (!bomb)	return 0;
		
		if (damage < 0)	damage = bomb.ExplosionDamage;
		if (radius < 0)	radius = bomb.ExplosionRadius;
		if (thrust < 0)	thrust = double(damage * 30.0);
		if (trad < 0)	trad = radius;
		if (tfull < 0)	tfull = full;
		
		if ((damage == 0 && thrust == 0) || (radius == 0 && trad == 0))
			return 0;
		
		if (source && !(flags & XF_EXPLICITDAMAGETYPE) && DamageType == 'None')
			DamageType = source.DamageType;
		
		// Set up the iterator stuff. Do NOT deal any damage or thrusting until
		// after the iterator is complete. If an actor is destroyed during 
		// iteration, the engine won't have enough time to fill in the missing
		// data link and the iteration will end abruptly!
		
		Vector3 pos = bomb.pos;
		int count = 0;
		Array<Actor> Mon; Mon.Clear();
		Array<Bool> NoDmg; NoDmg.Clear();
		
		// Code copied directly from P_RadiusAttack, ensuring accuracy.
		let it = BlockThingsIterator.CreateFromPos(
			pos.x, pos.y, pos.z - radius, bomb.height + radius * 2, radius, false);
		Actor mo = null;
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || (!mo.bSHOOTABLE && !mo.bVULNERABLE))
				continue;
			
			// If the filter is used, only actors of that type may be damaged.
			// If inverse is used, all BUT filter can be damaged.
			bool parent = (eflags & EXF_PARENT);
			bool inverse = (eflags & EXF_INVERSE);
			if (filter)
			{
				if ((!inverse && ((parent && !(mo is filter)) || (!parent && mo.GetClass() != filter))) ||
					(inverse && ((parent && (mo is filter)) || (!parent && mo.GetClass() == filter))))
						continue;
			}
				
			// Filter out what classes are ineligible for damage.
			bool NoDamage = (
				(mo.bNORADIUSDMG && !bomb.bFORCERADIUSDMG) ||
				(mo == source && !(flags & XF_HURTSOURCE)) ||
				(bomb.bDONTHARMCLASS && bomb.GetClass() == mo.GetClass()) ||
				(bomb.bDONTHARMSPECIES && bomb.Species == mo.Species));
			
			// If we want to exclude damage and don't care for thrusting,
			// no need to continue.
			if (NoDamage && !(radflags & RADF_ALWAYSTHRUST))
				continue;
			
			// No need for distance checks here. A trace is performed later which
			// handles that for this function.
			if (!mo.CheckSight(bomb, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
				continue;
			
			// Actor qualifies. Record it and whether to deal damage or not.
			Mon.Push(mo);
			NoDmg.Push(NoDamage);
		}
		
		//----------------------------------------------------------------------
		//----------------------------------------------------------------------
		// Now that we have all the actors, time to deal damage.
		for (int i = 0; i < Mon.Size(); i++)
		{
			mo = Mon[i];
			if (!mo)	continue;
			bool NoDamage = NoDmg[i];
			
			// Replicate the A_Explode effect by disallowing thrusting damage.
			// If thrusting is wanted despite not qualify for A_Explode, then
			// don't assign BLASTED flag.
			int tflags = radflags;
			if (NoDamage && !(tflags & RADF_NODAMAGE))
				tflags |= (RADF_NODAMAGE|RADF_NOIMPACTDAMAGE);
			
			// Deal the damage/thrusting.
			// First, calculate the damage based on distance. In this case it does
			// a trace to find the closest point on the bounding box.
			double falloff = MC_Functions.GetDamageFalloff(bomb, mo, double(radius), double(full), bomb.bOLDRADIUSDMG, (flags & XF_NOTMISSILE));
			double tfall = MC_Functions.GetDamageFalloff(bomb, mo, double(trad), double(tfull), bomb.bOLDRADIUSDMG, (flags & XF_NOTMISSILE));
			double newthrust = thrust * tfall;
			int dmg = int(round(damage * falloff));
			
			// Bear in mind the division by mass GREATLY dilutes the thrusting
			// power, hence why if thrust < 0, it'll multiply by 30.
			
			newthrust = newthrust * 0.5 / double(mo.mass);
			
			if (newthrust >= 0.01 && !mo.bDONTTHRUST && 
				(!bomb.bNODAMAGETHRUST || (tflags & RADF_NODAMAGE)))
			{
				Vector3 bpos = bomb.pos;
				Vector3 mpos = mo.pos + (0,0,mo.height * 0.5);
				if (mo == bomb)
					mo.Vel.Z += newthrust;
				else if (bomb.bOLDRADIUSDMG) 
					mo.Vel.XY += level.Vec2Diff(bpos.XY, mpos.XY).Unit() * newthrust;
				else
					mo.Vel += level.Vec3Diff(bpos, mpos).Unit() * newthrust;
				
				if ((tflags & RADF_NODAMAGE) && !(tflags & RADF_NOIMPACTDAMAGE) &&
					!(mo is 'PlayerPawn') && !mo.player)
					mo.bBLASTED = true;
			}
			
			int res = (tflags & RADF_NODAMAGE) ? 0 : dmg;
			
			if (res > 0 || bomb.bFORCEZERORADIUSDMG)
			{
				if (mo.DamageMobj(bomb, source, res, DamageType, DMG_THRUSTLESS|DMG_EXPLOSION) > 0)
					count++;
			}
		}
		
		// Side note, try not to rely on doing this often. It causes immense slowdowns.
		if (alert)		bomb.A_AlertMonsters();
		return count;
	}
	
	
	//--------------------------------------------------------------------------
	// Replicates DamageMobj without actually affecting anyone.
	// * tar - Target. Receiver of damage.
	// * inf - Inflictor. Usually a missile.
	// * src - Source. The one to blame.
	// * damage - The amount to deal.
	// * mod - Damage type.
	// * flags - There are many of these.
	// 
	// Returns how much damage would have been done to the actor.
	//--------------------------------------------------------------------------
	
	static int CalculateDamage(Actor tar, Actor inf, Actor src, int damage, 
								Name mod, int flags = 0)
	{
		// Make sure the target exists.
		if (!tar || tar.health < 1 || (!tar.bSHOOTABLE && !tar.bVULNERABLE))
			return -1;
			
		if (damage < 1)
			return damage;
		
		PlayerInfo player = tar.player;
		bool telefragDamage = (!tar.bLAXTELEFRAGDMG && damage >= Actor.TELEFRAG_DAMAGE);
		bool forced = (flags & DMG_FORCED);
		
		// Is it spectral?
		if (!forced && tar.bSPECTRAL && !telefragDamage)
		{
			// Attacker's projectile isn't.
			if (!inf || !inf.bSPECTRAL)
				return -1;
		}
		
		// Armor piercing?
		if (inf && inf.bPIERCEARMOR)
			flags |= DMG_NO_ARMOR;
			
		if (!forced)
		{
			if (tar.bDORMANT)
				return -1;
				
			if (tar.bNODAMAGE)
				return 0;
			
			if (!telefragDamage)
			{
				if (tar.bINVULNERABLE && (!inf || (!inf.bFOILINVUL && !(flags & DMG_FOILINVUL))))
					return 0;
				
				if (player)
					damage = int(damage * G_SkillPropertyFloat(SKILLP_DamageFactor) * sv_damagefactorplayer);
				else
				{
					if (!tar.bFRIENDLY)	damage *= sv_damagefactormobj;
					else				damage *= sv_damagefactorfriendly;
				}
				
				if (inf)
				{
					if (inf.bSPECTRAL)
					{
						if (player)
							if (!deathmatch && inf.FriendPlayer > 0)
								return -1;
						else if (tar.bSPECTRAL)
							if (inf.FriendPlayer == 0 && tar.IsHostile(inf))
								return -1;
					}
					
					// Do/TakeSpecialDamage can cause some undesirable effects, 
					// such as triggering DamageMobj in some base classes. Since
					// my mods aren't designed to really handle them at any rate,
					// we won't be using it.
				//	inf->DoSpecialDamage(tar, damage, mod);
				}
				if (damage < 0)
					return -1;
					
				if (src)
				{
					damage = int(damage * src.DamageMultiply);
					
					// We want to avoid any custom behavior overrides since
					// they may try to trigger DamageMobj. Like ClusterPlex's
					// Rainbow Halo.
					// Probe the source's inventory for PowerDamage.
					if (damage > 0 && !(flags & DMG_NO_ENHANCE))
					{
						Inventory probe = null;
						for (probe = src.Inv; probe != null; probe = probe.Inv)
						{	
							let pwr = PowerDamage(probe);
							if (!pwr)	continue;
							
							damage = pwr.ApplyDamageFactors(pwr.GetClass(), mod, damage, damage * 4);
							
							if (damage < 1)
								return damage;
						}
					}
					
					// Now do a check for the power protection in target's inventory.
					if (damage > 0 && !(flags & DMG_NO_PROTECT))
					{
						Inventory probe = null;
						for (probe = tar.Inv; probe != null; probe = probe.Inv)
						{	
							let pwr = PowerProtection(probe);
							if (!pwr)	continue;
							
							damage = pwr.ApplyDamageFactors(pwr.GetClass(), mod, damage, damage / 4);
							
							if (damage < 1)
								return damage;
						}
					}
					
					// Now for the actual damagefactor on the main actor itself.
					if (damage > 0 && !(flags & DMG_NO_FACTOR))
						damage = tar.ApplyDamageFactor(mod, damage);
					
					// Teamplay damage reduction.
					if (((player && player != src.player) || (!player && tar != src)) &&
						tar.IsTeammate(src))
					{
						damage = int(damage * tar.level.teamdamage);
						if (damage < 1)
							return (damage < 0) ? -1 : 0;
					}
				}
			}
		}
		
		if (player)
		{
			if (player.cheats & CF_GODMODE2)
				return -1;
			if ((player.cheats & CF_BUDDHA2) || tar.bNODAMAGE)
				flags &= ~DMG_FORCED;
				
		//	if (!flags & DMG_NO_ARMOR)
				
		}
		
		return damage;
	}
	
	//--------------------------------------------------------------------------
	// CalculateDamageStrict
	// * tar - Target. Receiver of damage.
	// * inf - Inflictor. Usually a missile.
	// * src - Source. The one to blame.
	// * damage - The amount to deal.
	// * mod - Damage type.
	// * flags - There are many of these.
	// 
	// Like CalculateDamage, but ignores status flags like invulnerable, nodamage
	// or anything that cancels it out immediately. Fully calculates the damage
	// regardless of health.
	//--------------------------------------------------------------------------
	
	static int CalculateDamageStrict(Actor tar, Actor inf, Actor src, int damage, 
									Name mod, int flags = 0)
	{
		// Make sure the target exists.
		if (!tar)
			return -1;
			
		if (damage < 1)
			return damage;
		
		PlayerInfo player = tar.player;
		bool telefragDamage = (!tar.bLAXTELEFRAGDMG && damage >= Actor.TELEFRAG_DAMAGE);
		bool forced = (flags & DMG_FORCED);
		
			
		if (!forced)
		{
			if (!telefragDamage)
			{	
				if (player)
					damage = int(damage * G_SkillPropertyFloat(SKILLP_DamageFactor) * sv_damagefactorplayer);
				else
				{
					if (!tar.bFRIENDLY)	damage *= sv_damagefactormobj;
					else				damage *= sv_damagefactorfriendly;
				}
				
				if (inf)
				{
					if (inf.bSPECTRAL)
					{
						if (player)
							if (!deathmatch && inf.FriendPlayer > 0)
								return -1;
						else if (tar.bSPECTRAL)
							if (inf.FriendPlayer == 0 && tar.IsHostile(inf))
								return -1;
					}
					
					// Do/TakeSpecialDamage can cause some undesirable effects, 
					// such as triggering DamageMobj in some base classes. Since
					// my mods aren't designed to really handle them at any rate,
					// we won't be using it.
				//	inf->DoSpecialDamage(tar, damage, mod);
				}
				if (damage < 0)
					return -1;
					
				if (src)
				{
					damage = int(damage * src.DamageMultiply);
					
					// We want to avoid any custom behavior overrides since
					// they may try to trigger DamageMobj. Like ClusterPlex's
					// Rainbow Halo.
					// Probe the source's inventory for PowerDamage.
					if (damage > 0 && !(flags & DMG_NO_ENHANCE))
					{
						Inventory probe = null;
						for (probe = src.Inv; probe != null; probe = probe.Inv)
						{	
							let pwr = PowerDamage(probe);
							if (!pwr)	continue;
							
							damage = pwr.ApplyDamageFactors(pwr.GetClass(), mod, damage, damage * 4);
							
							if (damage < 1)
								return damage;
						}
					}
					
					// Now do a check for the power protection in target's inventory.
					if (damage > 0 && !(flags & DMG_NO_PROTECT))
					{
						Inventory probe = null;
						for (probe = tar.Inv; probe != null; probe = probe.Inv)
						{	
							let pwr = PowerProtection(probe);
							if (!pwr)	continue;
							
							damage = pwr.ApplyDamageFactors(pwr.GetClass(), mod, damage, damage / 4);
							
							if (damage < 1)
								return damage;
						}
					}
					
					// Now for the actual damagefactor on the main actor itself.
					if (damage > 0 && !(flags & DMG_NO_FACTOR))
						damage = tar.ApplyDamageFactor(mod, damage);
					
					// Teamplay damage reduction.
					if (((player && player != src.player) || (!player && tar != src)) &&
						tar.IsTeammate(src))
					{
						damage = int(damage * tar.level.teamdamage);
						if (damage < 1)
							return (damage < 0) ? -1 : 0;
					}
				}
			}
		}
		return damage;
	}

	//--------------------------------------------------------------------------
	// StaticTurnAng
	// 
	// A realistic form of turning that isn't restricted via angle and pitch.
	// Coded by KeksDose, modified by Major Cooke.
	// 
	// * Caller: The actor to do the turning.
	// * Mo: The actor Caller turn towards.
	// * Angl: The angle in degrees to turn. Default is 5.0
	// * HeightOffset: Multiplier value of mo's height between [0.0,1.0]. 
	// 		0.0 means aim at the bottom, 1.0 means aim at the top. 
	//		Default is 0.5 (middle).
	// * Seeker: If true, the velocity of the actor is set and then aimed.
	//		Otherwise, simply turns the actor in the direction.
	// 		In general, avoid using this. It's only here for SeekAng's purposes.
	// * Flags: Same flags as A_SeekerMissile. Only used if it's a seeker.
	//--------------------------------------------------------------------------
	static void StaticTurnAng(Actor caller, Actor mo, double angl = 5, double heightoffset = 0.5, 
		bool seeker = false, int seekflags = 0)
	{
		if (!caller || !mo || angl <= 0.0)	return;
		
		heightoffset = Clamp(heightoffset, 0.0, 1.0);
		
		double angle = caller.angle;
		double pitch = caller.pitch;
		Vector3 pos = caller.pos;
		
		Vector3 dir = levellocals.vec3diff(pos, mo.Vec3Offset(0, 0, mo.height * heightoffset));
		
		Vector3 view = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		dir				= dir.unit();
		let view_unit	= view.unit();
		let cosang		= view_unit dot dir;
		
		if (cosang < -0.999) // Facing opposite, so you can do whatever you like here!
		{
			caller.angle += angl;
		}
		else if (cosang < 0.999) // Not yet locked on
		{
			let ver_axis	= (view_unit - cosang * dir).unit();
			let ang			= acos(cosang);
		   
			// Turn. This is all local polar coordinates.
			ang = max(0, ang - angl);
			view = (cos(ang) * dir + sin(ang) * ver_axis);			
		}
		
		if (seeker)
		{
			if (seekflags & SMF_CURSPEED)
				caller.vel = caller.vel.Length() * view;
			else
				caller.vel = caller.speed * view;
			caller.A_FaceMovementDirection();
		}
		else
		{
			int flag = (caller.bINTERPOLATEANGLES) ? SPF_INTERPOLATE : 0;
			caller.A_SetAngle(VectorAngle(view.x, view.y), flag);
			caller.A_SetPitch(asin(-view.z), flag);
		}
	}
	
	//--------------------------------------------------------------------------
	// A replacement for A_SeekerMissile. This performs StaticTurnAng above
	// after doing a bit of prep work to make sure it still behaves like 
	// a seeker missile does. Flags are the same as A_SeekerMissile's.
	//--------------------------------------------------------------------------
	static void StaticSeekAng(Actor caller, double angl = 5, double heightoffset = 0.5, 
		int flags = 0, bool forceseek = false)
	{
		if (!caller || !caller.bSEEKERMISSILE ||
			(caller.vel ~== (0,0,0) && ((flags & SMF_CURSPEED) || caller.speed <= 0)))
			return;
			
		if (!caller.Tracer || caller.Tracer.Health < 1 || (!forceseek && caller.Tracer.bCANTSEEK))
		{
			caller.Tracer = null;
			if (flags & SMF_LOOK)	
			{
				Vector3 oldvel = caller.vel,
						oldpos = caller.pos,
						oldpre = caller.prev,
						dir = (caller.angle, caller.pitch, caller.roll);
				
				caller.A_SeekerMissile(1, 1, flags);
				
				if (caller.Tracer)
				{
					caller.vel = oldvel;
					caller.SetOrigin(oldpos, false);
					caller.prev = oldpre;
					caller.angle = dir.x;
					caller.pitch = dir.y;
					caller.roll = dir.z;
				}
				else return;
			}
			else return;
		}
		if (!(caller.vel ~== (0,0,0)))
			caller.A_FaceMovementDirection();
		MC_Functions.StaticTurnAng(caller, caller.tracer, angl, heightoffset, true, flags);
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
}