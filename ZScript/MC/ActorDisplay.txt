//==============================================================================
// Actor Display
// Developed by Major Cooke
// Additional code by KeksDose (LibEye) and Marisa Kirisame (Shape2D)
//
// This is used to draw elements to a HUD, specifically making elements stick to
// actors without relying on ACS hacks.
// 
// Used by D4D to replicate the item drop highlights from Doom 2016/Eternal and
// Rocket Launcher Lock On Module.
//==============================================================================


// MCHandlerDummy 
// This is only here because SLADE doesn't recognize functions defined in
// extended classes unfortunately, so the highlighting won't appear. Irritating.
Class MCHandlerDummy abstract
{
	private int CountShapes() { return 0; }
	private void SetupProjectionStuff() {}
	private void PrepareProjection() {}
	private ui void ProcessHudElements(RenderEvent e) {}
	private void TickShapes() {}
	private void CleanShapes() {}
	private void RemoveShape(MCHudShape mo) {}
	private void AddShape(Actor target, Actor caller, String texname, 
		Vector2 pos = (0,0), double rot = 0.0, Vector2 scale = (1,1), 
		double scalemin = 1.0, double scalemax = 1.0,	name cv = '', 
		double distmin = 0.0, double distmax = 0.0, name scalecvar = '') {}
}

extend class MCHandler
{
	// Much of this code is by KeksDose, modified by Major Cooke.
	protected Le_ProjScreen			proj;
	protected Le_GlScreen			gl_proj;
	protected Le_SwScreen			sw_proj;
	protected bool					can_project;
	protected bool					show_spaces;
	protected transient Cvar		cvar_renderer;
	protected Le_Viewport			viewport;
	protected Array<MCHudShape>		Shapes;
	
	protected void SetupProjectionStuff()
	{
		gl_proj			= new("Le_GlScreen");
		sw_proj			= new("Le_SwScreen");
		cvar_renderer	= Cvar.GetCvar("vid_rendermode", players [consoleplayer]);
		PrepareProjection();
	}
	
	// kd: This selects the correct projector for your renderer and determines
	// whether you can even do a projection.
	protected void PrepareProjection() 
	{
		if (cvar_renderer)
		{
			switch (cvar_renderer.GetInt()) 
			{
				default:
					proj = gl_proj;
					break;
				case 0:
				case 1:
					proj = sw_proj;
					break;
			}
		}
		else proj = gl_proj;
		can_project	= proj != NULL;
	}
	
	protected ui void ProcessHudElements(RenderEvent e)
	{
		if (automapActive || !proj || Shapes.Size() < 1)	
			return;
		
		proj.CacheResolution();
		proj.CacheFov(players[consoleplayer].fov);
		proj.OrientForRenderUnderlay(e);
		proj.BeginProjection();
		
		
		for (int i = 0; i < Shapes.Size(); i++)
		{
			let Shape = Shapes[i];
			if (!Shape || !Shape.target || !Shape.caller || !Shape.active)	continue;
			
			// If there's a CVar attached, means it's controlled by the player.
			// Otherwise, it'll draw normally by default.
			
			if (Shape.check != '')
			{
				CVar check = CVar.GetCvar(Shape.check, players[consoleplayer]);
				if (check && !check.GetBool())
					continue;
			}
			
			let target = Shape.target;
			Vector2 p = Shape.pos;
			proj.ProjectWorldPos(target.vec3offset(0, p.x, p.y));
			if (proj.IsInFront())
			{
				let draw_pos = proj.ProjectToScreen();
				
				Shape.Render(e, draw_pos, proj.Distance());
			}
		}
	}
	
	int CountShapes()
	{
		int count = 0;
		for (int i = 0; i < Shapes.Size(); i++)
		{
			if (Shapes[i])	count++;
		}
		return count;
	}
	
	void TickShapes()
	{
		int size = Shapes.Size();
		if (size < 1)	return;
		for (int i = 0; i < Shapes.Size(); i++)
		{
			if (Shapes[i])	Shapes[i].Tick();
		}
	}
	
	// Cleans out any null or destroyed shapes. For convenience, it attempts to
	// tick the shape and if it's destroyed immediately afterwards, it's simply
	// not included. This way we're only iterating through the array once.
	void CleanShapes()
	{
		int size = Shapes.Size();
		if (size < 1)	return;
		
		Array<MCHudShape> temp; temp.Clear();
		for (int i = 0; i < size; i++)
		{
			let Shape = Shapes[i];
			if (Shape)
			{
				Shape.Tick();
				if (Shape && !Shape.bDESTROYED)
					temp.Push(Shape);
			}
		}
		Shapes.Move(temp);
	}
	
	void RemoveShape(MCHudShape mo)
	{
		int pos = Shapes.Find(mo);
		if (pos < Shapes.Size())
		{
			Shapes[pos].Destroy();
			Shapes[pos] = null;
		}
	}
	
	MCHudShape AddShape(Actor target, Actor caller, String texname, 
	Vector2 pos = (0,0), double rot = 0.0, 
	Vector2 scale = (1,1), double scalemin = 1.0, double scalemax = 1.0,
	name cv = '', double distmin = 0.0, double distmax = 0.0, name scalecvar = '',
	bool animate = false)
	{
		TextureID tex = TexMan.CheckForTexture(texname,TexMan.Type_Any);
		if (!target || !caller || !tex)
		{
			Console.Printf("AddShape needs target, caller and texture");
			return null;
		}

		let hud = new('MCHudShape');
		if (hud)
		{
			hud.alpha = 1.0;
			hud.target = target;
			hud.caller = caller;
			hud.SetTexture(texname, false);
			hud.pos = pos;
			hud.rot = rot;
			hud.scale = scale;
			hud.scalemin = scalemin;
			hud.scalemax = scalemax;
			if (cv != '')	hud.check = cv;
			hud.distmin = abs(distmin);
			hud.distmax = abs(distmax);
			hud.ScaleCvar = scalecvar;
			hud.animate = animate;
			hud.Init();
			
			int size = Shapes.Size();
			
			if (size < 1)
			{
				Shapes.Push(hud);
				return hud;
			}
			
			int pos = Shapes.Find(null);
			if (pos < size)	Shapes[pos] = hud;
			else			Shapes.Push(hud);
		}
		return hud;
	}
}

//==============================================================================
// MCHudShape
// 
// This class is responsible for drawing things on actors, such as 
//==============================================================================
Class MCHudShape play
{
	private Vector2 siz; 		// Stores the internal size of the texture.
	private String texname;		// Texture name
	private TextureID tex;		// Fetched texture.
	private Shape2D flat;
	private Shape2DTransform trans;
	
	Name	Check,
			ScaleCvar;			// Name of the scaling cvar to abide. Needed
	transient Cvar _ScaleCvar;	// since cvars cannot be saved, but Names can.
	
	Vector2 pos, scale; 		// offset & scale
	double	scalemin, scalemax,	// min/max scale constraints (NOT random)
			distmin, distmax,	// min/max distance constraints (NOT random)
			rot, alpha;			// rotation + alpha
			
	Actor	target,				// Used for positioning.
			caller;				// Only used to ensure the caller still wants it drawn.
	bool 	active,				// Should it draw at all?
			animate;			// Should it draw ANIMDEFS animations?
	
	// Recommended to leave animate false unless they possess the same size since
	// the code does NOT adapt to the new texture's size.
	
	//==========================================================================
	// Getters & Setters
	//==========================================================================
	
	// Active refers to if it should draw or not.
	void SetActive(bool on)	{ active = on;	}
	void ToggleActive() { active = !active; }
	
	//--------------------------------------------------------------------------
	// SetTexture(string texname, bool doinit)
	// 
	// Sets the texture name for drawing, but only if valid. This shouldn't be
	// used to attempt to shut off the texture drawing. Use SetActive for that.
	// 'doinit' should remain true 99.9% of the time. This ensures the drawer
	// refreshes the bounding boxes
	//--------------------------------------------------------------------------
	bool SetTexture(string texname, bool doinit = true)
	{
		TextureID tex = TexMan.CheckForTexture(texname,TexMan.Type_Any);
		if (tex)
		{
			self.texname = texname;
			self.tex = tex;
			if (doinit)	Init();
			return true;
		}
		return false;
	}
	
	//--------------------------------------------------------------------------
	// GetTexture()
	// 
	// Returns the texname and current TextureID data.
	//--------------------------------------------------------------------------
	String, TextureID GetTexture() { return texname, tex; }
	
	//--------------------------------------------------------------------------
	// Sets up the coordinates for drawing the images and the triangles.
	void Init()
	{
		flat = new("Shape2D");
		
		// simple coords
		flat.PushCoord((0,0));	// 0
		flat.PushCoord((1,0));	// 1
		flat.PushCoord((0,1));	// 2
		flat.PushCoord((1,1));	// 3
		
		// PushTriangle takes INDEXES of coords pushed to it in order from
		// first to last, as numbered above.
		flat.PushTriangle(0,2,1); // (0,0) (0,1) (1,0)
		flat.PushTriangle(2,3,1); // (0,1) (1,1) (1,0)
		siz = TexMan.GetScaledSize(tex);
		
		// Create the vertices and push them into the array.
		Vector2 vertices[4];
		vertices[0] = (-siz.x,-siz.y);
		vertices[1] = ( siz.x,-siz.y);
		vertices[2] = (-siz.x, siz.y);
		vertices[3] = ( siz.x, siz.y);
		
		flat.Clear(Shape2D.C_Verts);
		for ( int i=0; i<4; i++ ) 
			flat.PushVertex(vertices[i]);
		
		trans = new('Shape2DTransform');
		active = true;
	}
	
	//--------------------------------------------------------------------------
	// Performs the rendering.
	//--------------------------------------------------------------------------
	ui void Render( RenderEvent e, Vector2 drawpos, double distance)
	{	
		if (!active || bDESTROYED || alpha <= 0.0 || distance < 1.0 || scale.x == 0.0 || scale.y == 0.0)
			return;
		// Reset the transformation.
		trans.Clear();
		
		Vector2 ts = scale;
		if (distmax > distmin)
		{
			if (scalemax > scalemin)
				ts *= Clamp(distmax / distance, scalemin, scalemax);
			else
				ts *= Max(scalemin, distmax / distance);
		}
		if (ScaleCvar != '' && _ScaleCvar)
		{
			if (_ScaleCvar)	ts *= _ScaleCvar.GetFloat();
		}
		trans.Scale(ts);
		trans.Rotate(rot);
		trans.Translate(drawpos);
		
		flat.SetTransform(trans);
		
		// draw the shape
		Screen.DrawShape(tex, animate, flat, 
			DTA_Alpha, Clamp(alpha, 0.0, 1.0));
	}
	
	// Only the tick function is capable of validating play-side information,
	// such as getting the cvar of the player after loading a saved game.
	virtual void Tick() 
	{
		if (bDESTROYED)	return;
		if (!target || !caller || !tex)
		{
			Destroy();
			return;
		}
		if (!_ScaleCvar)	_ScaleCvar = Cvar.GetCvar(ScaleCvar, players[consoleplayer]);
	}
}