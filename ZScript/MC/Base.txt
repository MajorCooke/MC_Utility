#include "ZScript/MC/WeaponSwitch.txt"
#include "ZScript/MC/Constants.txt"
#include "ZScript/MC/ActorDisplay.txt"
#include "ZScript/MC/Relations.txt"
#include "ZScript/MC/Morph.txt"
#include "ZScript/MC/Beam.txt"
#include "ZScript/MC/Actor.txt"

// A simple set or wrappers for making ACS-style HUD messages.
// Calling these is as simple as:
// MCMsg.PlainMsg(...);

Class MCMsg play
{
	static void PlainMsg( Name fnt, string txt, Vector2 pos, Vector2 vsize = (0,0), int talign = -1, Vector2 balign = (0,0), int color = Font.CR_UNTRANSLATED, Vector3 time = (0,0,0), int wrap = 0, uint id = 0, int layer = BaseStatusBar.HUDMSGLayer_OverHUD )
	{
		notHudMessageHandler.PlainMsg(fnt, txt, pos, vsize, talign, balign, color, time, wrap, id, layer);
	}
	
	static void ClearMsg(uint id)
	{
		notHudMessageHandler.PlainMsg("smallfont", "", (0,0), id: id);
	}
}
//==============================================================================
// MCHandlerStatic is simply used for loading up and maintaining the weapon 
// slots and priorities only. Avoids the need to repopulate the weapon switching
// data when it can just be done once.
//
// Static event handlers should be avoided otherwise. Eventually, the main
// weapon switching itself will be moved to MCHandler so changes this won't be
// compromised by saved games. As in, the changes will kick in at the end of a
// map instead of needing to start a new game.
//==============================================================================
Class MCHandlerStatic : StaticEventHandler
{
	private MCWeaponList WeaponList;
	private bool InGame;
	private MCHandler Event;
	
	override void OnRegister()
	{
		SetOrder(4999);
		Super.OnRegister();
	}
	
	override void OnUnregister()
	{
		InGame = false;
		Super.OnUnregister();
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		// Always refresh when loading from a saved game to reflect changes.
		if (!WeaponList || e.IsSaveGame)
			WeaponList = FetchWeaponList(e.IsSaveGame);
		
		InGame = true;
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		InGame = false;
	}
	
	//--------------------------------------------------------------------------
	// Custom functions
	//--------------------------------------------------------------------------
	// Grabs the weapon list. Force will completely refresh it.
	MCWeaponList FetchWeaponList(bool force = false)
	{
		MCWeaponList WL = WeaponList;
		if (!WL || force)
		{
			WL = new('MCWeaponList');
			WL.Init();
		}
		return WL;
	}
	
	bool CheckInGame() const
	{
		return (InGame && gamestate == GS_LEVEL);
	}
	
	static MCHandlerStatic Fetch()
	{
		return MCHandlerStatic(Find("MCHandlerStatic"));
	}
}

//==============================================================================
// Non-static handler.
//
// This is information that's only necessary for when a map is loaded. None of
// the data is carried over into other maps, though it is preserved on said map
// if it's a hub map. Otherwise, transitioning to a new map will destroy the
// handler + info.
//==============================================================================

Class MCHandler : EventHandler
{
	enum EKeybindOrders
	{
		KBO_REGULARONLY = 0,
		KBO_AUTOMAPONLY = 1,
		KBO_REGULAROVERAUTOMAP = 2,
		KBO_AUTOMAPOVERREGULAR = 3,
	}
	const Second = 35;
	const TimeTrigger = Second * 5;

	AArray Monsters, DeadMonsters, Missiles, Tracker, Items;
	private int Timer;
	private Array<QueuedWeapon> Queue;
	private MCWeaponList WeaponList;
	private MCHandlerStatic SEvent;
	private bool InGame;
	
	//--------------------------------------------------------------------------
	// Custom functions
	//--------------------------------------------------------------------------
	static MCHandler Fetch()
	{
		return MCHandler(Find("MCHandler"));
	}
	
	bool IsPlayerPawn(Actor mo)
	{
		return (!mo || mo is "PlayerPawn" || mo.player);
	}
	
	private void UpdateWeaponList()
	{
		if (!SEvent)	SEvent = MCHandlerStatic.Fetch();
		WeaponList = SEvent.FetchWeaponList();
	}
	
	void QueueWeaponTag(QueuedWeapon tosend)
	{
		if (tosend)	Queue.Push(tosend);
	}
	
	//--------------------------------------------------------------------------
	// Overrides
	//--------------------------------------------------------------------------
	
	override void OnRegister()
	{
		SetOrder(5000); // Plenty of room to go above and below.
		SetupProjectionStuff();
		Super.OnRegister();
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		ProcessHudElements(e);
	}

	override void PostUiTick()
	{
		PrintWeaponTags();
	}

	override void WorldTick()
	{
		TickWeaponTags();
	
		// Clear the lists every TimeTrigger seconds of null pointers.
		Timer++;
		if (Timer >= TimeTrigger)
		{
			Timer = 0;
			int size = Monsters.Actors.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = Monsters.Actors[i];
				if (mo && mo.health < 1)
				{
					if (DeadMonsters.Find(mo) >= DeadMonsters.Size())
						DeadMonsters.Push(mo);
					Monsters.Actors[i] = null;					
				}
			}
			size = DeadMonsters.Actors.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = DeadMonsters.Actors[i];
				if (mo && mo.health > 0)
				{
					Monsters.Push(mo);
					DeadMonsters.Actors[i] = null;
				}
			}
			
			Monsters.Clean();
			DeadMonsters.Clean();
			Missiles.Clean();
			Tracker.Clean();
			Items.Clean();
			CleanShapes(); //Automatically ticks all valid shapes.
		}
		else
		{
			TickShapes();
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		Monsters = AArray.Create();
		DeadMonsters = AArray.Create();
		Missiles = AArray.Create();
		Tracker = AArray.Create();
		Items = AArray.Create();
		Queue.Clear();
		UpdateWeaponList();
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		if (!plr)	return;
		
		if (e.Name == 'ClearMonsters')
		{
			int size = Monsters.Size();
			if (!Monsters || size < 1)	return;
			
			int count = 0;
			for (int i = 0; i < size; i++)
			{
				Actor mo = Monsters.Actors[i];
				if (mo && mo.bISMONSTER && mo.health > 0)
				{
					count++;
					mo.ClearCounters();
					mo.Destroy();
				}
			}
			Console.Printf("%d monsters destroyed.", count);
			return;
		}
		if (plr.health < 1)	return;
		
		if (e.Name == 'PullItems')
		{
			let it = ThinkerIterator.Create("Inventory");
			Inventory mo = null;
			while (mo = Inventory(it.Next()))
			{
				if (!mo || mo.owner || mo.special || mo is 'DoomKey' || !mo.bDROPPED)
					continue;
					
				mo.Warp(plr, (plr.radius + mo.radius) * 2,0,0,random(0,359),WARPF_NOCHECKPOSITION);
			}
		}
		
		if (e.Name == 'DontThrust')
		{
			plr.bDONTTHRUST = !(plr.bDONTTHRUST);
			
			if (plr.bDONTTHRUST)	Console.Printf("DontThrust ON");
			else					Console.Printf("DontThrust OFF");
			return;
		}
		
		
		
		Array<String> strings;
		e.Name.Split (strings, ":");
		
		if (strings.Size() > 1)
		{
			if (strings[0] == 'MC_SelectWeapon')
			{
				Weapon next = ChangeWeapons(e);
				if (next) 
				{
					QueuedWeapon tosend = QueuedWeapon.Create(next);
					QueueWeaponTag(tosend);
				}
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	// Recording section. Here, we add things that have specifics needs for 
	// tracking so we don't have to rely on iterators. As Graf Zahl stated,
	// an array will go much farther to optimize the crap out of searching
	// over using an iterator in almost all circumstances.
	// Slowdowns are inevitable if the arrays grow huge, but that's to be
	// expected of a lot of one type of thing. But at least it'll be efficient.
	override void WorldThingSpawned(WorldEvent e)
	{
		Actor mo = e.thing;
		
		if (!mo || mo.bNOINTERACTION || mo is "Inventory" || mo.bNOSECTOR || 
			IsPlayerPawn(mo) || mo is "RandomSpawner")
			return;

		if (mo.bMISSILE && mo.bSEEKERMISSILE)
		{
			Missiles.Push(mo);
			return;
		}
		
		if ((mo.bISMONSTER || mo.bSHOOTABLE))
		{
			if (mo.health > 0)
				Monsters.Push(mo);
			else
				DeadMonsters.Push(mo);
		}
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	override void WorldThingRevived(WorldEvent e)
	{
		// Add the monster to the list if not already present.
		Actor mo = e.Thing;
		if (IsPlayerPawn(mo))	return;
		
		int i = DeadMonsters.Find(mo);
		if (i < DeadMonsters.Size())
			DeadMonsters.Actors[i] = null;
		Monsters.Push(mo);
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	override void WorldThingDied(WorldEvent e)
	{
		Actor mo = e.Thing;
		
		if (IsPlayerPawn(mo))
			return;
		
		// Allocate them over to the DeadMonsters array and remove them from 
		// the living.
		if (DeadMonsters.Find(mo) >= DeadMonsters.Size())
			DeadMonsters.Push(mo);
			
		int i = Monsters.Find(mo);
		if (i < Monsters.Size())
			Monsters.Actors[i] = null;
		
		
		if (mo.CountInv("MinionToken"))
		{
			let victor = mo.target;
			if (victor && !IsPlayerPawn(victor) && mo.master)
			{
				victor.lastenemy = mo.master;
			}
		}
	}
	
	
	//==========================================================================
	//==========================================================================
	// See WeaponSwitch.txt
	override bool InputProcess(InputEvent ev)
	{
		return CheckInputWeaponChange(ev);
	}
}

/*==============================================================================
================================================================================
 AArray Class
 Designed by Major Cooke

 The goal behind this is an adjustable actor array with functions for
 maintaining and cleaning more easily. Note, this is meant for a more permanent
 solution that is maintained over time, not so much for brief instantiation
 within a function or similar unless it's a pointer fetched from another.
 
 To use: 
 
 1. Declare a variable of type AArray and call the create function. Pass in an
 optional size and/or class type to restrict the actors its tracking.
 e.g. AArray arr = AArray.Create(-1, 'Zombieman');
 
 2. Add maintenance functions in whatever is using it if needed, i.e. a timer.
 The Delete() function simply schedules a position for deletion by marking
 the actor's spot as null. Once the timer hits the interval, do any maintenance
 and call the AArray's Clean() function sometime during it.
 
 Every 10 seconds, MCHandler above first makes sure alive/dead monsters are
 properly sorted into the proper arrays first, then cleans out any nulls, 
 reducing memory usage and optimizing future Find() calls. Better performance!
 
 3. You can then safely use Push() and Delete() as desired.
================================================================================
==============================================================================*/

Class AArray
{
	Class<Actor> ClassType;	
	Array<Actor> Actors;
	
	//--------------------------------------------------------------------------
	// Initialization function.
	//--------------------------------------------------------------------------
	static AArray Create(int size = -1, Name type = '')
	{
		AArray arr = new('AArray');
		if (type != '')
		{
			Class<Actor> test = type;
			if (!test)
				Console.Printf("AArray warning: Ignoring invalid filter %s", type);
		}
		arr.Init(size, type);
		return arr;
	}
	
	void Init(int size, Class<Actor> type)
	{
		ClassType = type;
		Actors.Clear();
		
		if (size > 0)
			SetSize(size);
	}
	
	//--------------------------------------------------------------------------
	// Information.
	//--------------------------------------------------------------------------
	
	int Size() const	{	return Actors.Size();	}
	
	// Find an actor's position in the array.
	// GZDoom cannot convert uint to int on return so it must be assigned first.
	// Also, If nulls are not desired, return the size of the array.
	int Find(Actor mo, bool nulls = true) const
	{
		if (!nulls && mo == null)
			return Actors.Size();
		int pos = Actors.Find(mo);
		return pos;
	}
	
	// Actor version, returns an actor instead of a position.
	Actor FindActor(Actor mo) const
	{
		int size = Actors.Size();
		if (size < 1)
			return null;
			
		int pos = Actors.Find(mo);
		Actor ret = null;
		
		if (pos < size)	
			ret = Actors[pos];
		return ret;
	}
	
	//--------------------------------------------------------------------------
	// Manipulation functions.
	//--------------------------------------------------------------------------
	
	// Make sure it exists and isn't restricted from insertion.
	// If strict, only allow the specified actor class in.
	// Else, allow inheritance.
	void Push(Actor mo, bool strict = false)
	{
		if (mo && (ClassType == null || 
			(mo.GetClass() == ClassType || (!strict && mo is ClassType))))
			Actors.Push(mo);
	}
	
	// Removes the actor and 'schedules' shrinking via a null.
	void Delete(Actor mo, bool all = false)
	{
		int size = Actors.Size();
		if (mo && size > 0)
		{
			// Eliminate all duplicates.
			if (all) 
				for (int i = 0; i < size; i++)
					if (mo == Actors[i])
						Actors[i] = null;
			
			// Just find one.
			else	
			{
				int pos = Actors.Find(mo);
				if (pos < size)
					Actors[pos] = null;
			}
		}
	}
	
	// Cleans up an array by copying all non-nulls to a temp array and overriding
	// the original. This is the most efficient way in ZScript so far, as it
	// beats calling DynArray's Delete function over and over in performance.
	void Clean()
	{
		int size = Actors.Size();
		// Array empty.
		if (size < 1)	return;
			
		// No empty slots.
		if (Actors.Find(null) >= size)	return;
			
		Array<Actor> temp; temp.Clear();
		for (int i = 0; i < size; i++)
		{
			if (Actors[i] != null)
				temp.Push(Actors[i]);
		}	
		Actors.Move(temp);
	}
	
	// Removes all actors from the array.
	void Clear() { Actors.Clear(); }
	
	//--------------------------------------------------------------------------
	// Internal functions only.
	//--------------------------------------------------------------------------
	
	private int SetSize(int size)
	{
		int old = Actors.Size();
		if (old == size)
			return 0;
		
		if (size < 1)
		{
			Actors.Clear();
			return -old;
		}
		
		Actors.Resize(size);
		if (old < size)
			for (int i = old; i < size; i++)
				Actors[i] = null;
		
		return old - size;
	}
}