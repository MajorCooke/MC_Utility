//==============================================================================
//==============================================================================
// MCWeaponList
// 
// This class is responsible for finding all weapons when the game loads up.
// Used for determining the next weapon slot when pressing a slot number.
//
// In order for this to work, a weapon must have "Weapon.SlotNumber" and
// "Weapon.SlotPriority" assigned.
//
// "Weapon.SlotNumber" must be between 0 and 9
//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
// Handler extensions. Deals with tags and weapon switching in one.
//------------------------------------------------------------------------------
extend class MCHandler
{
	// PostUITick
	private ui void PrintWeaponTags()
	{
		// load 'em up
		for ( int i=0; i < queue.size(); i++ )
			if (queue[i].timestamp >= gametic)
				queue[i].PrintTag();
	}
	
	// WorldTick
	private play void TickWeaponTags()
	{
		for (int i = 0; i < Queue.size(); i++)
		{
			if (Queue[i].timestamp >= gametic) continue;
			Queue.Delete(i);
			i--;
		}
	}

	// InputProcess
	// This overrides the 'slot <X>/weapnext/weapprev' commands and comes first.
	// This is where it all begins.
	private ui bool CheckInputWeaponChange(InputEvent ev)
	{
		if (ev.Type == InputEvent.Type_KeyDown)
		{
			int index = consoleplayer;
			PlayerInfo player = players[index];
			
			// Make sure they exist, and they desire this.
			if (player)
			{
				let cv = CVar.GetCVar('MC_KeyconfWeaponBuster', player);
				if (!cv || !cv.GetInt())
					return false;
			}
			else return false;
			
			// They exist, but don't operate on dead/morphed players.
			let plr = player.mo;
			if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph",true))
				return false;
			CVar KBPriority = CVar.GetCvar('MC_KBPriority', player);
			static const String KeyBindsCCMDs [] = {
				"slot 1", "slot 2", "slot 3", "slot 4", "slot 5",
				"slot 6", "slot 7", "slot 8", "slot 9", "slot 0",
				"weapnext", "weapprev"	};
			static const String KeyBindsNetEvents [] = {
				"slot:1", "slot:2", "slot:3", "slot:4", "slot:5",
				"slot:6", "slot:7", "slot:8", "slot:9", "slot:0",
				"next", "prev"	};
			
			// Find the key and translate it from the raw command to an 
			// event-friendly string. Makes splitting it easier.
			int bind1 = 0, bind2 = 0;
			for (int i = 0; i < KeyBindsCCMDs.Size(); i++) 
			{
				// Bindings is a global struct. Definition in menu.txt inside GZDoom.pk3.
				// Get the keys that are bound to this action.
				if (automapactive)
				{
					int prior = (KBPriority != null) ? KBPriority.GetInt() : KBO_AUTOMAPONLY;
					
					if (prior == KBO_AUTOMAPONLY || prior == KBO_AUTOMAPOVERREGULAR)
						[bind1, bind2] = AutomapBindings.GetKeysForCommand (KeyBindsCCMDs [i]);
					else
						[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);
					
					
					// If we want filling in for unbound keys, fetch them from
					// the other binding set.
					if (prior == KBO_AUTOMAPOVERREGULAR)
					{
						if (bind1 == 0 || bind2 == 0)
						{
							int t1 = 0, t2 = 0;
							[t1, t2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);
							if (bind1 == 0)	bind1 = t1;
							if (bind2 == 0)	bind2 = t2;
						}
					}
					else if (prior == KBO_REGULAROVERAUTOMAP)
					{
						if (bind1 == 0 || bind2 == 0)
						{
							int t1 = 0, t2 = 0;
							[t1, t2] = AutomapBindings.GetKeysForCommand (KeyBindsCCMDs [i]);
							if (bind1 == 0)	bind1 = t1;
							if (bind2 == 0)	bind2 = t2;
						}
					}
				}
				else
					[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);
				
				if (ev.KeyScan == bind1 || ev.KeyScan == bind2) 
				{
					//Console.Printf("%s", KeyBindsNetEvents[i]);
					// Calls NetworkEvent in Base.txt and assembles the command
					// to call ChangeWeapons function below, and aborts the 
					// rest of the input.
					EventHandler.SendNetworkEvent(String.Format("MC_SelectWeapon:%s", KeyBindsNetEvents[i]));
					return true;
				}
			}
		}
		return false;
	}

	//==========================================================================
	// ChangeWeapons
	//
	// Sets the forthcoming weapon based on the command sent to it. Applicable
	// commands are:
	// 
	// slot # (0-9)
	// weapnext
	// weapprev
	//==========================================================================
	private Weapon ChangeWeapons(ConsoleEvent e)
	{
		int pnum = e.Player;
		if (!playeringame[pnum])
			return null;
			
		PlayerInfo player = players[pnum];

		if (!player) // No player.
			return null;

		Array<String> commandStrings;
		e.Name.Split (commandStrings, ":");
		if (commandStrings.Size() < 2) // Return if the array contains less than two strings
			return null;
			
		// At this point, we should have at minimum two strings in this form:
		// [0] = MC_SelectWeapon
		// [1] = <command>
		// See InputProcess for the translations (from first to second array)
		
		Weapon ready = player.ReadyWeapon;
		Weapon pending = player.PendingWeapon;
		if (pending == null)	pending = WP_NOCHANGE;
				
		Weapon next = null;
		if (commandStrings[1] == 'next')
		{
			next = MCWeaponList.SetNextWeapon(player, false, ready, pending);
		}
		else if (commandStrings[1] == 'prev')
		{
			next = MCWeaponList.SetNextWeapon(player, true, ready, pending);
		}
		else if (commandStrings[1] == 'slot')
		{
			// Switching to a weapon in slot.
			// MC_SelectWeapon:slot:#
			int len = (commandStrings.Size() > 2) ? commandStrings[2].Length() : 0;
			if (len < 1)	return null;
			
			String s = commandStrings[2];
			if (len > 1)	s = s.CharAt(len - 1);
			int num = s.ToInt();
			
			//Have a number.
			next = MCWeaponList.SetSlotWeapon(player, num, ready, pending);
		}
		if (next && next != WP_NOCHANGE && next != ready)
			player.PendingWeapon = next;
		else next = null;
		
		return next;
	}
}

//==============================================================================
//==============================================================================
// MCWeaponList
//
// This is the primary container for finding all weapons. This is initialized
// upon each map start-up so changing maps allows for the list to refresh.
//
// Gathers all weapons and sorts them according to SlotNumber and SlotPriority.
//==============================================================================
//==============================================================================

Class MCWeaponList play
{
	// Helper function for sorting. Simply switches the positions that
	// are passed in.
	
	static protected void SwapWeaponPos(out Array<Weapon> SlotWeaps, uint a, uint b)
	{
		Weapon temp = SlotWeaps[a];
		SlotWeaps[a] = SlotWeaps[b];
		SlotWeaps[b] = temp;
	}
	
	static protected bool GetWeapons(Actor plr, out Array<Weapon> SlotWeaps, int slot = -1)
	{
		if (slot == 10)	slot = 0;
		
		SlotWeaps.Clear();
		bool AllSlots = (slot < 0 || slot > 9);
		for (let probe = plr.Inv; probe != null; probe = probe.Inv)
		{
			let weap = Weapon(probe);
			if (weap && weap.Amount > 0)
			{
				// If the weapon has a valid slot number and matches the slot or
				// we're getting all slots, add it.
				int s = weap.SlotNumber;
				double p = weap.SlotPriority;
				if (s > -1 && s < 10 && (AllSlots || s == slot) &&
					p >= 0.0 && p <= 1.0)
						SlotWeaps.Push(weap);
			}
		}
		
		int size = SlotWeaps.Size();
		
		if (size < 1)		return false; // Nothing here.
		else if (size == 1)	return true; // No need to sort in this case.
		
		// Now we have all the weapons, sort through all of them.
		// This array is iterated through like this:
		// | = Sub-iterated through
		// - = Not iterated through
		// ||||||||||
		// -|||||||||
		// --||||||||
		// ---|||||||
		// ----||||||
		// -----|||||
		// ------||||
		// -------|||
		// --------||
		// Where each time, the iteration is started one step closer to the end
		// of the array.
		
		// For future reference, the prefix legend is as follows:
		// Un = Unsorted Weapon
		// We = Sorted Weapon
		for (int i = 0; i < size - 1; i++)
		{
			for (int j = 0; j < size - i - 1; j++)
			{
				let UnDef = SlotWeaps[j];
				let WeDef = SlotWeaps[j + 1];
				int UnSlot = UnDef.SlotNumber;
				int WeSlot = WeDef.SlotNumber;
				
				// Put slot 0 weapons at the top by faking them to be 10.
				if (UnSlot == 0)	UnSlot = 10;
				if (WeSlot == 0)	WeSlot = 10;
				
				// First, we need to sort out based on slot. If it's behind,
				// switch it. This will group them all up together in DESCENDING
				// order (10 -> 1).
				if (UnSlot > WeSlot)
				{
					SwapWeaponPos(SlotWeaps, j, j+1);
					continue;
				}
				
				// If they are the same slot, compare the priority and swap 
				// positions. as needed. Also in descending order.
				else if (UnSlot == WeSlot)
				{
					if (UnDef.SlotPriority > WeDef.SlotPriority)
					{
						SwapWeaponPos(SlotWeaps, j, j+1);
					}
				}
			}
		}	
		return true;
	}
	
	//==========================================================================
	// SetSlotWeapon
	// 
	// Replicates default weapon selecting just like regular GZDoom does it.
	// This function is called when using a 'slot <X>' command.
	//==========================================================================
	static Weapon SetSlotWeapon(PlayerInfo player, int slot, Weapon wep, Weapon pend)
	{
		if (!player || !player.mo || slot < 0 || slot > 9)	return null;
		
		Actor plr = player.mo;
		
		// GetWeapons will automatically sort all weapons in order.
		Array<Weapon> SlotWeaps;
		if (!GetWeapons(plr, SlotWeaps, slot))	// No weapons to select in this slot.
			return null;
		
		// Only one weapon so return it.
		int size = SlotWeaps.Size();
		if (size == 1)		
			return (CheckWeaponValid(SlotWeaps[0])) ? SlotWeaps[0] : null;
	
		// Get the weapon at the far end of the array if the player doesn't have
		// any selected by assigning the index to initialize failsafe measures.
		// The weapon at the far end has the highest priority while the close 
		// end has the lowest selection priority.
		Weapon next = null;
		int index = size;
		
		// Skip over the current pending weapon if it's already to be selected.
		if (pend != WP_NOCHANGE)	index = SlotWeaps.Find(pend);
		else if (wep)				index = SlotWeaps.Find(wep);
		
		// Safety check: Don't go beyond the boundaries of the array.
		if (index >= size)
		{
			index = size - 1;
			if (index < 0)	return null;
			
			next = SlotWeaps[index];
			if (CheckWeaponValid(next))
				return next;
		}
		
		// The player has a weapon so grab the next valid one.
		int i = index;
		do
		{
			--i;
			if (i < 0)	i = size - 1;
			
			next = SlotWeaps[i];
			if (CheckWeaponValid(next))
				return next;
		}
		while (i != index);
		
		// Nothing found.
		return null;
	}
	
	//==========================================================================
	// SetNextWeapon
	//
	// Replaces 'weapnext' and 'weapprev' functionality.
	// This effectively relies upon the initialized weapon array being in
	// perfect order.
	//==========================================================================
	
	static Weapon SetNextWeapon(PlayerInfo player, bool prev, Weapon wep, Weapon pend)
	{
		if (!player || !player.mo)	return null;
		Actor plr = player.mo;
		
		Array<Weapon> SlotWeaps;
		if (!GetWeapons(plr, SlotWeaps, -1))	// No Weapons to select in this slot.
			return null;
		
		int size = SlotWeaps.Size();
		if (size == 1)		return CheckWeaponValid(SlotWeaps[0]) ? SlotWeaps[0] : null;
		
		// No weapon or not in the array. Try to find one.
		if (!wep || SlotWeaps.Find(wep) >= size)
		{
			for (int i = 0; i < size; i++)
			{
				let next = SlotWeaps[i];
				if (CheckWeaponValid(next))
					return next;
			}
		}
		
		// The array is already sorted, so all we need to do is cycle through to 
		// the next array position and check if the weapon is valid for switching.
		// Start where the pending weapon is, to allow for rapid weapon selection.
		int start = size;
		if (pend != WP_NOCHANGE)	start = SlotWeaps.Find(pend);
		else						start = SlotWeaps.Find(wep);
		
		// Now go through the array and find a valid one.
		int i = start, pi = i, failsafe = 10;
		do
		{
			pi = i;
			if (prev)
			{
				if (--i < 0)
				{
					i = size - 1;
					failsafe--;
				}
			}
			else
			{
				if (++i >= size)
				{
					i = 0;
					failsafe--;
				}
			}
			
			if (i == pi || i < 0 || i >= size)	return null;
			
			let next = SlotWeaps[i];
			
			if (CheckWeaponValid(next))
				return next;
			
		} 
		while (failsafe > 0 && i != start);
		return null;
	}
	
	// Helper function for Set<Next/Slot>Weapon. Checks to see if the player
	// has the weapon and the ammo for it if the DMflag is not enabled.
	static protected bool CheckWeaponValid(Weapon check)
	{
		return (check && check.Amount > 0 && 
			(sv_dontcheckammo || check.CheckAmmo(Weapon.EitherFire, false)));
	}
}

//------------------------------------------------------------------------------
// QueuedWeapon is based off of Marisa Kirisame's NotHudMessage classes. 
// This is needed to display the weapon tag.
//------------------------------------------------------------------------------
Class QueuedWeapon
{
	Weapon weap;
	int timestamp;
	static clearscope QueuedWeapon Create(Weapon next)
	{
		if (!next)	return null;
		
		let q = new('QueuedWeapon');
		q.weap = next;
		q.timestamp = gametic;
		return q;
	}
	
	ui void PrintTag()
	{
		if (weap != null)
			weap.DisplayNameTag();
	}
}